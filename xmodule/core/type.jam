# Copyright 2016 DeviantArt Inc.
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)


##################################################################
##
##   core xmodule types
##
##################################################################

## basic type that represents a generated file-tree ;
type.register XMODULE ;

## xmodule types
type.register XBUILD  : : XMODULE ; # build targets, no installation
type.register XDIST   : : XMODULE ; # install built targets (from XBUILD)
type.register XREPO   : : XMODULE ; # copy repository from elsewhere
type.register XPATH   : : XMODULE ; # path inside an existing XMODULE
type.register XRSRC   : : XMODULE ; # resource-locator inside XMODULE


## where xmodule's  state/log/etc files go
type.register XWORKSPACE   ;

## where an xmodule's files are staged
type.register XROOT        ;

## resource-locator inside an existing XMODULE ;

## xmodule exports
type.register XINCLUDE          :  : H   ;
type.register XSYSTEMINCLUDE    :  :     ;
type.register XFILE             :        ;
type.register XLIB              :  : LIB ;


## misc support types
type.register XSRCHASH   ;


##################################################################
##
##    reimplement 'type.type' for detection of type from filename
##
##################################################################

# xmodule implementation with access to variables
rule xmodule-type ( filename ) 
{
    return $(.file.type.$(filename:D=)) ;
}

# put xmodule version into type module
IMPORT $(__name__) : xmodule-type : type : xmodule-type ;

# save original type.type 
IMPORT type : type : type : xmodule-original-type ;


module type {
    rule type ( filename )
    {
        # try by xmodule type first
        local result = [ xmodule-type $(filename) ] ;

        # if that didn't work, try original rule
        if ! $(result) {
            return [ xmodule-original-type $(1) ] ;
        }
        return $(result) ;
    }
}


##################################################################
##
##    register-filenames
##
##    register whole filenames for 'type.type' detection
##
##################################################################
rule register-filenames ( filenames + : type )
{
    for local f in $(filenames) {
        if $(f:D) {
            import errors ;
            errors.error Attempting to specify filename with a path
                \"$(f)\" : "Type $(type)" ;
        }
        if ! $(.type.file.$(f)) {
            .file.type.$(f) = $(type) ;
        }
        else if $(.file.type.$(f)) != $(type)
        {
            import errors ;
            errors.error Attempting to specify multiple types for filename
                \"$(f)\" : "Old type $(.file.type.$(f)), New type $(type)" ;
        }
    }
}



##################################################################
##
##  fix caching bug in class subvariant
##
##################################################################

module class@subvariant
{
    # make caching here dependent on target-type (bug in boost.build?)
    rule xmodule-all-target-directories ( target-type ? )
    {

        local key = self.xmodule-target-directories-$(target-type:E="") ;
        if ! $($(key))-is-not-empty {
            local result = [ xmodule-compute-target-directories $(target-type) ] ;
            if ! $(result) {
                result = "" ;
            }
            $(key) = $(result) ;
        }
        if $($(key)) = "" {
            return ;
        }
        else {
            return $($(key)) ;
        }
    }
    
    rule xmodule-compute-target-directories ( target-type ? )
    {
        local result ;
        for local t in $(self.created-targets)
        {
            # Skip targets of the wrong type.
            local type = [ $(t).type ] ;
            if ! $(target-type) ||
                ( $(type) && [ type.is-derived $(type) $(target-type) ] )
            {
                result = [ sequence.merge $(result) : [ $(t).path ] ] ;
            }
        }
        for local d in $(self.other-dg)
        {
            result += [ $(d).xmodule-all-target-directories $(target-type) ] ;
        }
        return $(result) ;
    }
    
    rule implicit-system-includes ( prefix : target-type ? )
    {
        local key = xmodule-isi-$(prefix)-$(target-type:E="") ;
        
        if ! $($(key))-is-not-empty {
            local target-paths = [ xmodule-all-target-directories $(target-type) ] ;
            target-paths = [ sequence.unique $(target-paths) ] ;
            local result = $(prefix)$(target-paths) ;
            if ! $(result) {
                result = "" ;
            }
            $(key) = $(result) ;
        }
        
        if $($(key)) = "" {
            return ;
        } else {
            return $($(key)) ;
        }
    }
}

##################################################################
##
##    reimplement 'adjust-properties' method from  
##                boost.build builtin class 'compile-action'
##
##    support <xsystem-include>
##
##################################################################

# save original class@compile-action.adjust-properties  
IMPORT class@compile-action : adjust-properties : 
       class@compile-action : xmodule-orig-adjust-properties ;
       
module class@compile-action 
{
    rule adjust-properties ( property-set )
    {
        property-set = [ xmodule-orig-adjust-properties $(property-set) ] ;
        
        local s = [ $(self.targets[1]).creating-subvariant ] ;
        if $(s) {
            property-set = 
                [ $(property-set).add-raw 
                    [ $(s).implicit-system-includes "<cflags>-isystem " 
                        : XSYSTEMINCLUDE 
                    ] 
                ] ;
        }
        return $(property-set) ;
    }
}



